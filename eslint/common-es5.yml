# Paul's JavaScript style. Originally developed at Body Labs. Derived from
# Crockford style, with a bunch of tweaks.

env:
  node: true
  mocha: true
  es6: true

plugins:
  - 'mocha'

extends:
  "eslint:recommended"

rules:
  # Strict mode.
  strict: ["error", "global"]

  # Don't read from process.env. Disable in config and tests when needed.
  no-process-env: "error"

  # Two-space indent.
  indent: ["error", 2, { "SwitchCase": 1 }]
  no-mixed-spaces-and-tabs: "error"
  no-trailing-spaces: "error"

  # Enforce reasonable line lengths and short comments.
  # Note that trailing comments can go to 120.
  max-len: ["error", { "code": 120, "comments": 80, "ignoreUrls": true }]

  # Newline at end of file.
  eol-last: "error"

  # Line comments start with a space <-- like this one does.
  spaced-comment: "error"

  # var compositeThing = new CompositeThing();
  # var params = { thisIsPreferred: true };
  # var params = { this_is_okay: true };
  camelcase: ["error", { "properties": "never" }]
  new-cap: "error"

  # if (cond) {
  #     stuff();
  # } else {
  #     otherStuff();
  # }
  # for (var i = 0; i < target; ++i) {
  #     stuff();
  # };
  # In ES6, prefer arrow functions (use common.yml).
  # const foo = (arg1, arg2) => {
  #     stuff(arg1);
  # };
  # const factorial = (value) => {
  #   return value === 0 ? 1 : value * factorial(value - 1);
  # };
  # In ES5, use function expressions:
  # var foo = function (arg1, arg2) {
  #     stuff(arg1);
  # };
  # var factorial = function (value) {
  #     return value == 0 ? 1 : value * factorial(value - 1);
  # };
  keyword-spacing: ["error", { "before": true, "after": true }]
  brace-style: ["error", "1tbs", { "allowSingleLine": true }]
  space-before-blocks: ["error", "always"]
  curly: "error"
  semi-spacing: "error"
  func-style: ["error", "expression"]
  space-before-function-paren: ["error", { "anonymous": "always", "named": "ignore" }]
  comma-spacing: "error"
  func-names: ["error", "never"]

  # var foo = [
  #     'one',
  #     'two',
  #     'three',
  # ];
  # var foo = ['one', 'two', 'three'];
  # var bar = {
  #     one: 1,
  #     two: 2,
  #     three: 3,
  # };
  # var bar = { one: 1, two: 2, three: 3 };
  # var baz = { bazinga: {
  #    one: 1,
  #    two: 2,
  # } };
  # foo.bar = 123;
  comma-style: ["error"]
  comma-dangle: ["error", "always-multiline"]
  operator-linebreak: ["error", "after", { "overrides": { "?": "before", ":": "before" } } ]
  array-bracket-spacing: ["error", "never"]
  object-curly-spacing: ["error", "always"]
  key-spacing: "error"
  quote-props: ["error", "as-needed"]
  dot-notation: "error"

  # var filter = function (item) { return item.count > 1; };
  # if (foo) {
  #     something();
  # } else {
  #     somethingElse();
  # }
  block-spacing: ["error", "always"]

  # 5 * (1 + 2)
  # ! obj.isValid()
  # ++count
  # count++
  # offset(-width, -height)
  # +bar
  # cond ? first : second
  space-in-parens: "error"
  space-unary-ops: ["error", { "words": true, "nonwords": false, "overrides": { "!": true } }]
  space-infix-ops: "error"

  # Automatic semicolon insertion is pretty bad.
  semi: "error"

  # Creating a function in a loop is a big gotcha.
  no-loop-func: "error"

  # Crockford, seems sensible.
  no-empty: "error"

  # Crockford, seems sensible.
  wrap-iife: ["error", "any"]

  # Crockford, seems sensible.
  no-with: "error"

  # var x = 'this is a' +
  #     'multi-line string';
  # From Crockford.
  no-multi-str: "error"

  # Avoid type coercion.
  eqeqeq: "error"

  # Style.
  dot-location: ["error", "property"]

  # No more thing.should.be.ok without calling it
  no-unused-expressions: "error"

  # Node.js
  handle-callback-err: "error"
  no-new-require: "error"

  # ES6.
  prefer-const: "warn"
  require-yield: "error"
  no-useless-constructor: "error"
  no-useless-rename: "error"
  no-const-assign: "error"

  # No parens single-arg arrow functions:
  # a => a; // instead of (a) => a
  # Other cases are still good:
  # () => {};
  # (a, b, c) => a;
  arrow-parens: ["error", "as-needed"]

  # No usless return keyword for one-line arrow functions
  # Write i => i + 1 instead of i => { return i + 1; }, and for objects too,
  # write i => ({ foo: i }) instead of i => { return { foo: i }; }
  arrow-body-style: ["error", "as-needed"]

  # Spaces before and after arrow, e.g. a => a
  arrow-spacing: "error"

  # Disable a couple of the recommended checks:

  # Allow unused parameters. In callbacks, removing them seems to obscure
  # what the functions are doing.
  no-unused-vars: ["error", {"args": "none"}]

  # Consistency.
  quotes: ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": true }]

  # Mocha.
  "mocha/handle-done-callback": "error"
  "mocha/no-global-tests": "error"
  "mocha/no-mocha-arrows": "error"
